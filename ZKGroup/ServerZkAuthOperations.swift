// Generated by zkgroup/codegen/codegen.py - do not edit

import Foundation
import libzkgroup

public class ServerZkAuthOperations {

  let serverSecretParams: ServerSecretParams

  public init(serverSecretParams: ServerSecretParams) {
    self.serverSecretParams = serverSecretParams
  }

  public func issueAuthCredential(uuid: ZKGUuid, redemptionTime: UInt32) throws  -> AuthCredentialResponse {
    var randomness: [UInt8] = Array(repeating: 0, count: Int(32))
    let result = SecRandomCopyBytes(kSecRandomDefault, randomness.count, &randomness)
    guard result == errSecSuccess else {
      throw ZkGroupException.AssertionError
    }

    return try issueAuthCredential(randomness: randomness, uuid: uuid, redemptionTime: redemptionTime)
  }

  public func issueAuthCredential(randomness: [UInt8], uuid: ZKGUuid, redemptionTime: UInt32) throws  -> AuthCredentialResponse {
    var newContents: [UInt8] = Array(repeating: 0, count: AuthCredentialResponse.SIZE)

    let ffi_return = FFI_ServerSecretParams_issueAuthCredentialDeterministic(serverSecretParams.getInternalContentsForFFI(), UInt64(serverSecretParams.getInternalContentsForFFI().count), randomness, UInt64(randomness.count), uuid.getInternalContentsForFFI(), UInt64(uuid.getInternalContentsForFFI().count), redemptionTime, &newContents, UInt64(newContents.count))

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw ZkGroupException.ZkGroupError
    }

    do {
      return try AuthCredentialResponse(contents: newContents)
    } catch ZkGroupException.InvalidInput {
      throw ZkGroupException.AssertionError
    }

  }

  public func verifyAuthCredentialPresentation(groupPublicParams: GroupPublicParams, authCredentialPresentation: AuthCredentialPresentation) throws {
    let ffi_return = FFI_ServerSecretParams_verifyAuthCredentialPresentation(serverSecretParams.getInternalContentsForFFI(), UInt64(serverSecretParams.getInternalContentsForFFI().count), groupPublicParams.getInternalContentsForFFI(), UInt64(groupPublicParams.getInternalContentsForFFI().count), authCredentialPresentation.getInternalContentsForFFI(), UInt64(authCredentialPresentation.getInternalContentsForFFI().count))
    if (ffi_return == Native.FFI_RETURN_INPUT_ERROR) {
      throw ZkGroupException.VerificationFailed
    }

    if (ffi_return != Native.FFI_RETURN_OK) {
      throw ZkGroupException.ZkGroupError
    }
  }

}
